// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  // Chess-specific relations
  puzzleProgress UserPuzzle[]
  openingProgress UserOpening[]
  stats         UserStats?
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chess application models
model UserPuzzle {
  id          String   @id @default(cuid())
  userId      String
  puzzleId    String
  solved      Boolean  @default(false)
  attempts    Int      @default(0)
  timeSpent   Int      @default(0) // in seconds
  lastAttempt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, puzzleId])
  @@map("user_puzzles")
}

model UserOpening {
  id           String   @id @default(cuid())
  userId       String
  openingId    String
  learned      Boolean  @default(false)
  confidence   Int      @default(1) // 1-5 scale
  timesPlayed  Int      @default(0)
  lastReviewed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, openingId])
  @@map("user_openings")
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalPuzzlesSolved    Int      @default(0)
  totalOpeningsLearned  Int      @default(0)
  currentStreak         Int      @default(0)
  bestStreak            Int      @default(0)
  averageRating         Float    @default(0)
  totalTimeSpent        Int      @default(0) // in seconds
  lastActiveDate        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}
